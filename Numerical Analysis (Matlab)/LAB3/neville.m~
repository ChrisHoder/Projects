% FILE: neville.m
% AUTHOR: Chris Hoder
% DATE: 9/27/2012
% ENGS 91
% Lab 3

% This method performs neville's algorithm. points are the x points for
% which you have y = f(x). I.e. f(points(i)) = y(i) where f() is the
% function you are attempting to approximate. n is the order of the
% polynomial.
function out = neville(points,y,x,n)
 %   Pn = zeros(n,n);
    for i = 1:n+1
       Pn(i,1) = y(i); 
    end
%     for i=1:n,
%         for j =2:i,
%             %Pn(i,j) = ((x-points(i-j+1))*Pn(i,j-1)-(x-points(i-1+1))*Pn(i-1,j-1))/(points(i-1+1)-points(i-j+1));
%             %(works)Pn(i,j) = ((x-points(i-1+1))*Pn(i-1,j-1)-(x-points(i-j+1))*Pn(i,j-1))/(points(i-1+1)-points(i-j+1));
%              Pn(i,j) = (-(x-points(i-1+1))*Pn(i-1,j-1)+(x-points(i-j+1))*Pn(i,j-1))/(points(i-1+1)-points(i-j+1));
%         end
%     end
%     
      for i =2:n+1,
          for j=2:i,
            Pn(i,j) = ((x-points(i-j+1))*Pn(i,j-1)-(x-points(i))*Pn(i-1,j-1))/(points(i)-points(i-j+1));
          end
      end
      
     


    out = Pn(n+1,n+1);
end