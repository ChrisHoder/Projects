http://www.cs.dartmouth.edu/~cbk/8
3
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html;charset=utf-8" />
<title>CS 8 | Problem Solving with Computer Science | Winter 2011</title>
<link rel="stylesheet" type="text/css" media="screen" href="cs8.css" />
<link rel="stylesheet" type="text/css" media="print" href="cs8print.css" />
</head>

<body>
<div id="page">
<div id="header">
  <div id="title">CS 8, Winter 2011</div>
  <div id="subtitle">Problem Solving with Computer Science</div>
</div>

<div id="navigation">
  <a href="index.php" class="navhere">About</a>
  <a href="schedule.php" class="navthere">Schedule</a>
  <a href="haskell.php" class="navthere">Haskell</a>
</div>

<div id="content">

<img src="evolve.jpg" alt="the evolution of problem solving..." title="the evolution of problem solving..."/>

<h2>Course description</h2> 

<p><strong>ORC</strong>. Motivated by applications in the arts,
sciences, social sciences, and computer systems, this course develops
skills in solving problems computationally.  Topics covered include
<em>representation</em> (how to capture computationally the objects
and processes of a problem), <em>abstraction</em> (how to build
high-level, multi-purpose toolkits for manipulating representations),
<em>recursion</em> and <em>modularity</em> (how to break problems into
subproblems and combine the solutions), <em>reasoning</em> (how to
understand what a computation is doing), and <em>concurrency</em> (how
to deal with multiple simultaneous processes).  These concepts are
taught within a functional programming language that supports them
well; they are applied in a series of programming labs solving fun
application problems.<br/> <strong>Prerequisite</strong>: Computer
Science 5 or placement via credit or exam.</p>

<p><strong>Informal</strong>. Now that you've got some programming
experience, let's use it to do some fun stuff!  We'll construct
animations, analyze biological sequences, search social networks, play
games, parse and manipulate HTML, identify clusters in data sets,
solve puzzles like Sudoku, and more.  And, while we're doing that,
we'll also develop expertise in core programming techniques useful
throughout computer science.  In the process we will learn that there
is more than one approach to programming.</p>

<a name="admin"></a>
<h2>Who, when, where</h2>

<dl>
<dt>Instructor</dt>
<dd><a href="http://www.cs.dartmouth.edu/~cbk/">Chris Bailey-Kellogg</a> | 250 Sudikoff | office hours: Mon 2-3, Tue 12-2, Fri 3-4, or by appointment</dd>

<dt>Teaching assistant</dt>
<dd><a href="http://www.cs.dartmouth.edu/~pete/">Pete Johnson</a> | 203 Sudikoff | office hours: Mon 3-5, Thu 2-4, or by appointment</dd>

<dt>Section leaders</dt>
<dd>Ken Greim, Jennifer Lure, Sam Marullo, David Rice. Section assignments and meeting times posted on Blackboard.</dd>

<dt>Course staff email</dt>
<dd>cs8 -at- cs -dot- dartmouth -dot- edu<br/>
Ask for help or guidance &mdash; one or more of us will answer!</dd>

<dt>Lectures</dt>
<dd>11-hour | MWF 11:15-12:20; Tu 12-12:50 | 006 Kemeny<br/>
The x-hour will be used for make-up, review, discussion, etc.</dd>

<dt>Section meetings</dt>
<dd>Weekly small-group meetings with section leaders to review lecture
material, discuss questions, go over homeworks, etc.  Groups and times
posted on Blackboard.</dd>

<dt>Lab</dt> 
<dd>Help will be available in Sudikoff instructional lab 003 at regular times: Sun 8-11, Mon 8-11, Tue 6-11.  Students enrolled in CS 8
should have automatic access via ID card to Sudikoff and the
instructional labs; drop an email if there are problems.</dd>

<dt>Announcements and discussion board</dt>
<dd>Available on <a href="http://www.dartmouth.edu/~blackboard/">Blackboard</a> </dd>

<dt>Textbook</dt> 
<dd>Required: <a href="http://haskell.cs.yale.edu/soe/">"SOE"</a>, <i>The Haskell School of Expression: Learning Functional Programming Through Multimedia</i>, by Paul Hudak.
Be sure to fix the <a href="http://haskell.cs.yale.edu/soe/Bug/erata.htm">errata</a> in your copy.</dd>
</dl>

<a name="coursework"></a>
<h2>Coursework</h2>

<dl>
  <dt>Short assignments (10%)</dt>
  <dd>
    Practice and feedback to aid your understanding of the basic
    course material.
    <dl>
      <dt>Submission</dt><dd>Hardcopy for written problems; hardcopy and
	electronic submission for programming problems.  Hardcopies
	are due by the start of lecture on the due date, in class or
	in the "In" slot for your section leader in Kemeny Hall.
	Electronic copies are due at the same time, submitted
	via <a href="http://www.dartmouth.edu/~blackboard/">Blackboard</a>.
	The course staff reserves the right to consider an assignment late or
	missing if either the printout or the Blackboard submission is
	absent.</dd>
      <dt>Late policy</dt><dd>No credit.</dd>
      <dt>Grading</dt><dd>2 (correct and good), 1 (needs work), or 0
	(nothing of substance). A solution receiving a 1 may be revised and
	resubmitted <em>once</em>, before the next regular class period after it is returned, for
	a possible upgrade to 2.</dd>
    </dl>
  </dd>

  <dt>Problem sets (50%)</dt>
  <dd>
    A mixture of written and in-depth programming exercises,
    challenging you to use the ideas we study in class to solve new
    problems.
    <dl>
      <dt>Submission</dt><dd>Same as for short assignments, except
that electronic submissions are due by <em>2 am</em> (hardcopies are
still due by class time).</dd>
      <dt>Late policy</dt><dd>Penalties: &lt; 8 hours: 10%; &lt; 24
	hours: 20%; &lt; 48 hours: 40%; more: no credit.  These apply
	if either the electonic or the hardcopy submission is
	late.<br/>Under extenuating circumstances (prolonged illness,
	death in the family, etc.), alternative arrangements may be
	made with the instructor <em>before</em> the due date.</dd>
      <dt>Grading</dt><dd>Specific grading rubrics will be provided
	for each problem set, covering <em>correctness</em> (solving the
	assigned problem), <em>structure</em> (organization, use of
	techniques covered, efficiency), <em>style</em> (readability of
	code, clarity of documentation), and <em>testing</em> (your
	demonstration of correctness).</dd>
      </dl>
    </dd>

  <dt>Exams (40%)</dt>
  <dd>A midterm and a final exam, each worth 20%.</dd>

  <dt>Extra credit</dt>
  <dd>Some homeworks have specific extra-credit problems; you may suggest
other extensions for possible extra credit; any exceptionally clever,
creative, or insightful work may likewise be awarded extra credit
points.  As its name suggests, extra credit is always optional, and
you should never feel that you have to do extra credit problems.
Extra credit points are recorded separately from other grades, and may be
used to help out borderline letter grade assignments at the end of the
term.  Extra credit points can only help, never hurt, your final
grade, regardless how much or how little extra credit you or your
classmates choose to do.  However, you should not view extra credit as a
substitute for doing good and thorough work on your assignments.</dd>
</dl>

<a name="honor"></a>
<h2>Collaboration and honor code</h2>

<p>Dartmouth's honor code applies to this course, and academic
misconduct policies will be strictly enforced.  If you have questions,
ask!</p>

<dl>
<dt>Partners</dt>
<dd>Much of the learning in this course comes from doing the
programming exercises.  On many problem sets, you may work jointly
with <em>one</em> other person, if so stated.  No more than two people
may work together on a given problem set.  If you choose to work with
someone else, you and your partner must submit a single joint
assignment with both names on it, and you must work with the same
person for the entire assignment (you cannot work with one person for
some parts of an assignment and a different person for other parts).
<p>On short assignments, you must work <em>alone</em> unless otherwise
stated in the assignment.</p></dd>

<dt>Attribution</dt>
<dd>Under no circumstances may you hand in work done with (or by)
someone else under your own name. If you have any doubt, credit any
person(s) (other than course staff) from whom you got help.  Your code
should <em>never</em> be shared with anyone, other than your partner
(if you are working in a pair).  You would be amazed at how easy it is
to tell when people work together on problem sets, so please don't
make life unpleasant for all of us by breaking these rules.  The
penalties for cheating at Dartmouth are severe, starting with
suspension and including expulsion. If you are unsure about anything,
please ask.

<p>Any hard-copy and electronic sources used must be properly cited
and acknowledged.  The only exceptions to this rule are as follows.
It is not necessary to cite material which is copied from lecture
notes or example code which we supply you in the course of this term.
Material copied or otherwise drawn by you personally from the course
textbook need only be cited in general terms, e.g., "this code sample
is from the textbook.".</p>

<p><em>You may not consult any solutions from previous terms' CS 8
assignments, whether they are from faculty or other students.</em> You
may not look at exams from previous offerings, except for ones that we
distribute as sample exams.</p>
</dd>

</dl>

<a name="access"></a>
<h2>Disabilities</h2>

<p>Students with disabilities enrolled in this course and who may need
disability-related classroom accommodations are encouraged to make an
appointment to see the instructor before the end of the second week of
the term. All discussions will remain confidential, although the <a
href="http://www.dartmouth.edu/~accessibility/">Student Accessibility
Services</a> office may be consulted to discuss appropriate
implementation of any accommodation requested.</p>

<a name="credits"></a>
<h2>Credits</h2>

<p>CS 8 was developed at Dartmouth College by Scot Drysdale and Chris
Bailey-Kellogg, with substantial assistance from Michael J. Fromberger
in the summer and fall of 2007.</p>

</div>

<div id="pagedecorationafter"></div>

</div>

</body>
</html>
