http://www.cs.dartmouth.edu/~robotics/cs44/index.php/Lecture_4
3
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15.1" />
		<meta name="keywords" content="Lecture 4" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/~robotics/cs44/opensearch_desc.php" title="cs44 (en)" />
		<link rel="alternate" type="application/rss+xml" title="cs44 RSS Feed" href="/~robotics/cs44/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="cs44 Atom Feed" href="/~robotics/cs44/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>Lecture 4 - cs44</title>
		<link rel="stylesheet" href="/~robotics/cs44/skins/common/shared.css?207" type="text/css" media="screen" />
		<link rel="stylesheet" href="/~robotics/cs44/skins/common/commonPrint.css?207" type="text/css" media="print" />
		<link rel="stylesheet" href="/~robotics/cs44/skins/monobook/main.css?207" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/~robotics/cs44/skins/monobook/IE50Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/~robotics/cs44/skins/monobook/IE55Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/~robotics/cs44/skins/monobook/IE60Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/~robotics/cs44/skins/monobook/IE70Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/~robotics/cs44/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/~robotics/cs44/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/~robotics/cs44/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/~robotics/cs44/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/~robotics/cs44/skins/common/IEFixes.js?207"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/~robotics/cs44/skins";
		var wgArticlePath = "/~robotics/cs44/index.php/$1";
		var wgScriptPath = "/~robotics/cs44";
		var wgScript = "/~robotics/cs44/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://www.cs.dartmouth.edu";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Lecture_4";
		var wgTitle = "Lecture 4";
		var wgAction = "view";
		var wgArticleId = "11";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 302;
		var wgVersion = "1.15.1";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/~robotics/cs44/skins/common/wikibits.js?207"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/~robotics/cs44/skins/common/ajax.js?207"></script>
		<script type="text/javascript" src="/~robotics/cs44/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Lecture_4 skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">Lecture 4</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From cs44</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Continuous_spaces"><span class="tocnumber">1</span> <span class="toctext">Continuous spaces</span></a></li>
<li class="toclevel-1"><a href="#Grid_cell_decomposition"><span class="tocnumber">2</span> <span class="toctext">Grid cell decomposition</span></a></li>
<li class="toclevel-1"><a href="#Exact_cell_decomposition_for_polygonal_obstacles"><span class="tocnumber">3</span> <span class="toctext">Exact cell decomposition for polygonal obstacles</span></a></li>
<li class="toclevel-1"><a href="#Visibility_graphs"><span class="tocnumber">4</span> <span class="toctext">Visibility graphs</span></a></li>
<li class="toclevel-1"><a href="#Skeletons.3B_Voronoi_diagrams"><span class="tocnumber">5</span> <span class="toctext">Skeletons; Voronoi diagrams</span></a></li>
<li class="toclevel-1"><a href="#Higher_dimensions"><span class="tocnumber">6</span> <span class="toctext">Higher dimensions</span></a>
<ul>
<li class="toclevel-2"><a href="#The_curse_of_dimensionality"><span class="tocnumber">6.1</span> <span class="toctext">The curse of dimensionality</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Configuration_space_for_simple_robots"><span class="tocnumber">7</span> <span class="toctext">Configuration space for simple robots</span></a></li>
<li class="toclevel-1"><a href="#Randomized_sampling"><span class="tocnumber">8</span> <span class="toctext">Randomized sampling</span></a></li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Continuous_spaces" id="Continuous_spaces"></a><h2> <span class="mw-headline">Continuous spaces</span></h2>
<p>We now have several tools for searching for paths in discrete state spaces:  BFS, DFS, IDS, UCS, GBF, A*, and variants. Given a clean, discrete graph, these algorithms have nice properties.  For example, A* makes good use of a heuristic to reduce running time, while still optimizing path cost; iterative deepening can be used to find optimal paths while reducing memory requirements. What do we do if the space is continuous?  If you only have a hammer, everything looks like a nail.  So one choice is to discretize the problem, and then search.  The discretization (we hope) will capture some essential characteristics of the problem.  Then the path can be refined to make sure that it is smoother and actually reaches the goal.  
</p><p>There are many ways to discretize a search problem.  Let's start with a simple example, planning a path for a point robot among polygonal obstacles.  Assume we would like to find the shortest path between start and goal.  We could cut the world up into little grid cells, mark each cell as "occupied" or "not occupied" depending on whether an obstacle overlaps the cell, and do some sort of (A*, IDS, BFS...) search on the space.  
</p><p>A few questions come up:  
</p>
<ul><li> How big should the cells be?
</li><li> How close to an optimal answer will we get?
</li><li> How expensive is this algorithm?  What about in 3d?  State space grows exponentially with dim.  (The curse of dimensionality.)
</li><li> Is this algorithm complete?  (No, it's "resolution complete".)
</li></ul>
<p>We will make certain assumptions.  We will assume that the robot can move freely in any direction in configuration space (if there is not an obstacle there), that the obstacles don't move (or if they do, they move along fixed paths), that the environment is known fully ahead of time, and that the configuration space obstacles can be constructed.
</p><p>For almost all motion planning problems we will make use of key abstraction:  <i>the configuration of the robot is represented by a point in parameterized configuration space</i>.  This reduces the motion planning problem to finding a trajectory or path for that point.  This means, for example, that the problem of planning a motion or path for a snake-like robot with 20 degrees of freedom can be thought of in the same way as planning a path for a point robot in the plane.  In fact, planning complicated manipulation problems can be abstracted in the same way.  For example, a robot must assemble five planar rigid bodies into a completed product in a factory.  Let <img class="tex" alt="q = (x_1, y_1, \theta_1, x_2, y_2, \theta_2, \ldots, x_5, y_5, \theta_5)" src="/~robotics/cs44/images/math/7/4/a/74a63bfdf69b06aa5f2d3f7f0e5109f2.png" />.  <i>Obstacles</i> in this fifteen-dimensional space represent any configuration in which there is a collision between any of the parts.
</p>
<a name="Grid_cell_decomposition" id="Grid_cell_decomposition"></a><h2> <span class="mw-headline">Grid cell decomposition</span></h2>
<p>The first approach is simple.  Place a grid of some resolution over the configuration space.  Each grid will be a discrete node in the graph.  Adjacent grid cells (in either four or eight directions) are connected by edges.  If a cell contains any piece of the obstacle, we will not include that cell in the graph.  Once the graph is constructed, we could use any graph search algorithm to find a path.  
</p><p>There are likely to be many paths from the start to the goal.  We probably want to find one that is relatively short, and we want to minimize the computation required to do that.  A reasonable choice might therefore be an A* graph search; this will guarantee short paths if the heuristic is optimistic.  A good choice of heuristic might be the Manhattan distance (if the graph is considered to be 4-connected) or Euclidean distance (if diagonal motions are allowed and the graph is considered 8-connected), ignoring obstacles.  These heuristics are optimistic, because obstacles will only make the true path cost higher. 
</p><p>An alternate problem is to find paths from every starting configuration to a single goal.  The wavefront planning algorithm discussed in the last lecture, which computes the cost-to-go at each configuration, would be a good starting point, and is an example of a technique called <b>dynamic programming</b>, where intermediate results are stored by an algorithm in cells.
</p><p>This grid method will work in higher dimensions, obviously.  It may not be possible to construct the boundary of the configuration space obstacles directly, but it is easy to test if a particular configuration causes a collision.  For example, you might simply render the obstacle and the robot in a particular configuration using graphics hardware; if multiple pieces of the robot or obstacle end up at the same pixel (or voxel) end up at the same location, then that configuration is in <img class="tex" alt="\mathcal C_{obs}" src="/~robotics/cs44/images/math/c/9/d/c9df621b5df7d9fc5319564120befac5.png" /> and can be removed from the graph during the search.
</p><p>How should the cell size be chosen?
</p><p>If the cells are large, then obstacles will seem larger than they are, since any piece of an obstacle in a cell causes the cell to be removed from the graph.  This may cause the algorithm not to return a path even in the case where one exists.  We say the algorithm is <b>resolution complete</b>:  if a path exists at the resolution considered, the algorithm finds it.  This is unsatisfying.
</p><p>If the cells are small, then the graph will be very large, and the run-time of the algorithm will be very bad.  
</p><p>A hybrid solution is possible, called <b>hierarchical cell decomposition</b>.  Divide the space into large cells.  Recursively divide each cell containing an obstacle.  That way, there are a few large cells that are safe, far from obstacles, allowing rapid search, and there is still a reasonably-high resolution for the boundaries of obstacles.  The behavior of the search is still unsatisfying -- as we will see, shortest paths tend to brush closely by obstacles, so much of the search time will be spent in the region of the grid with the smallest cells.  In higher dimensions, the boundary of <img class="tex" alt="\mathcal C_{obs}" src="/~robotics/cs44/images/math/c/9/d/c9df621b5df7d9fc5319564120befac5.png" /> may be very convoluted.
</p>
<a name="Exact_cell_decomposition_for_polygonal_obstacles" id="Exact_cell_decomposition_for_polygonal_obstacles"></a><h2> <span class="mw-headline">Exact cell decomposition for polygonal obstacles</span></h2>
<p>One of the issues with choosing the resolution for grid cell decomposition is that very many cells may be needed to approximate the border of an obstacle, since the cells are not aligned with that border.  What if we allowed cells to be more general polygons?  The boundary of the obstacle could be used to form the boundary of the cell, and cells would either contain only a slice of  <img class="tex" alt="\mathcal C_{obs}" src="/~robotics/cs44/images/math/c/9/d/c9df621b5df7d9fc5319564120befac5.png" /> or  <img class="tex" alt="\mathcal C_{free}" src="/~robotics/cs44/images/math/4/a/5/4a56c5a6d16ff9879c31a6293a36a7ea.png" />.  
</p>
<div class="center"><div class="floatnone"><a href="/~robotics/cs44/index.php/File:Exactcelldecomp.png" class="image" title="Exactcelldecomp.png"><img alt="" src="/~robotics/cs44/images/b/b3/Exactcelldecomp.png" width="262" height="242" border="0" /></a></div></div>
<p>One approach to building this decomposition algorithmically would be to draw a vertical line through each vertex.  Find the intersections of these vertical lines with the boundaries of the obstacles.  Cells each have two vertical boundaries, and up to two boundaries (the upper and lower) that are formed from segments of the obstacle boundaries.  The cells are possibly-open quadrilaterals.  We can see from the shape of the cells that if two cells touch along an edge, any path from one cell to the other through that edge will not leave those cells, so two free cells can be easily connected by a path.
</p><p>The number of cells depends on the number of vertices, rather than on some arbitrary resolution.
</p>
<a name="Visibility_graphs" id="Visibility_graphs"></a><h2> <span class="mw-headline">Visibility graphs</span></h2>
<p>The next approach relies on an idea which may seem obvious: if there is a path between the start and goal, then there is at least one shortest path between the start and goal.  This is not true for all motion problems, but it does hold for polygonal obstacles in the plane.  It turns out that the structure of the shortest paths is quite simple, and there is a finite number of candidate shortest paths.  We therefore restrict our search only to candidate shortest paths.
</p><p>Without obstacles, shortest paths are straight lines.  It turns out that in any space, shortest paths have three components:
</p>
<dl><dd> 1)  Pieces that are in free space, and are shortest in free space.  (e.g, lines)
</dd></dl>
<dl><dd> 2)  Pieces that follow boundaries of obstacles
</dd></dl>
<dl><dd> 3)  Jump points (places where the path jumps from type #1 to type #2 or vice versa.
</dd></dl>
<p>For our problem, we have 1) straight lines in free space, 2) straight lines along the boundary of the obstacles, and 3) jumps (at vertices).  
</p><p>One way to think about this is the following.  Consider any path from the start to the goal.  If we shorten that path as much as possible without breaking through the boundary of an obstacle, there will be no curves in the resulting path, but only line segments.  The endpoints of these line segments will be the start, the goal, or a vertex of a polygonal obstacle.  
</p><p>So draw a graph that connects the start to every other vertex (and the goal).  Keep lines that do not go through obstacles.  Now connect every vertex to every other vertex, and to the start and goal.  The remaining graph structure must contain the shortest path, and we can search for it, using nodes at vertices and at start and goal.
</p>
<div class="center"><div class="floatnone"><a href="/~robotics/cs44/index.php/File:Visibility.png" class="image" title="Visibility.png"><img alt="" src="/~robotics/cs44/images/e/ef/Visibility.png" width="262" height="182" border="0" /></a></div></div>
<p>If we connect all pairs of vertices (treating the start and goal as vertices), we will have a graph with <span class="texhtml"><i>O</i>(<i>n</i><sup>2</sup>)</span> edges.  Some of those edges pass through obstacles; we remove such edges, leaving what is known as the <b>visibility graph</b>.  (We say adjacent vertices in the graph can "see" each other, since they are connected by line segments that do not intersect obstacles.)
</p>
<a name="Skeletons.3B_Voronoi_diagrams" id="Skeletons.3B_Voronoi_diagrams"></a><h2> <span class="mw-headline">Skeletons; Voronoi diagrams</span></h2>
<p>Visibility graphs reduce the dimensionality of the search space from <span class="texhtml"><i>R</i><sup>2</sup></span> to a graph that represents the connectivity of the space; the dimensionality of this graph is 1, since it is made up of connected line segments.  The graph is connected if and only if the free space of configurations is connected.  
</p><p>We call a one-dimensional structure that is connected if and only if the embedding space is connected a **skeleton** of the space.  
</p><p>A visibility graph is a skeleton of a planar space with polygonal obstacles.  If the obstacles are not polygonal, it is not obvious how to construct the visibility graph.  It turns out that an application of Snell's law describes the tangents to smooth obstacle boundaries, but we will not go into the details.  
</p><p>There are other ways to generate a skeleton of a two-dimensional space.  One example is the Voronoi diagram.  Label each point in the free space by which obstacle it is closest to.  It turns out that the boundaries of these regions form a skeleton of the space.
</p>
<a name="Higher_dimensions" id="Higher_dimensions"></a><h2> <span class="mw-headline">Higher dimensions</span></h2>
<p>Things get trickier in higher dimensions.  First, consider shortest paths among polyhedral obstacles in three dimensions.  The paths are still made up of line segments, but the line segments may contact edges of the polyhedra rather than the vertices, so the shortest path may not be contained on the visibility graph of the vertices.  (Consider taking a path around a cube from start to goal.  Think of the path as a string, and tighten it.  There is no reason to expect that it contacts the cube only at vertices!)
</p><p>The Voronoi regions are now 3D cells, and their boundaries are surfaces.  No skeleton to be found here, either.  One idea is to build skeletons on those surfaces, and create a  <a href="http://www.cs.cmu.edu/~biorobotics/retract/rsch_HGVG.html" class="external text" title="http://www.cs.cmu.edu/~biorobotics/retract/rsch_HGVG.html" rel="nofollow">hierarchy for path planning</a>. 
</p><p>Exact cell decompositions are also hard in higher dimensions -- it tends to be difficult to represent boundaries of the obstacles, and the boundaries may be concave.
</p>
<a name="The_curse_of_dimensionality" id="The_curse_of_dimensionality"></a><h3> <span class="mw-headline">The curse of dimensionality</span></h3>
<p>The number of nodes in a graph used for motion planning tends to scale exponentially with the dimensionality of the space.  For example, consider grid cell decomposition, which is straightforward to implement in any dimension.  With even a coarse division of cells, the number of cells explodes by the time we reach even five or six dimensions.
</p>
<a name="Configuration_space_for_simple_robots" id="Configuration_space_for_simple_robots"></a><h2> <span class="mw-headline"> Configuration space for simple robots </span></h2>
<p>We'll look at 2R and 3R planar arms, and at some mobile robots. 
</p>
<a name="Randomized_sampling" id="Randomized_sampling"></a><h2> <span class="mw-headline"> Randomized sampling </span></h2>
<p><a href="http://msl.cs.uiuc.edu/rrt/" class="external text" title="http://msl.cs.uiuc.edu/rrt/" rel="nofollow">RRT page.</a>
</p>
<!-- 
NewPP limit report
Preprocessor node count: 31/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key robo_wiki-cs44_:pcache:idhash:11-0!1!0!!en!2!edit=0 and timestamp 20110220201037 -->
<div class="printfooter">
Retrieved from "<a href="http://www.cs.dartmouth.edu/~robotics/cs44/index.php/Lecture_4">http://www.cs.dartmouth.edu/~robotics/cs44/index.php/Lecture_4</a>"</div>
						<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/~robotics/cs44/index.php/Lecture_4" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/~robotics/cs44/index.php?title=Talk:Lecture_4&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource"><a href="/~robotics/cs44/index.php?title=Lecture_4&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="/~robotics/cs44/index.php?title=Lecture_4&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/~robotics/cs44/index.php?title=Special:UserLogin&amp;returnto=Lecture_4" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://www.cs.dartmouth.edu/~robotics/brain.png);" href="/~robotics/cs44/index.php/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-About-the-course"><a href="/~robotics/cs44/index.php/Main_Page">About the course</a></li>
				<li id="n-Schedule"><a href="/~robotics/cs44/index.php/Schedule">Schedule</a></li>
				<li id="n-BFS-code-fragment"><a href="/~robotics/cs44/index.php/Bfsnotes">BFS code fragment</a></li>
				<li id="n-Cool-AI-links"><a href="/~robotics/cs44/index.php/Cool_AI_links">Cool AI links</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-assignments'>
		<h5>assignments</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Assignment-.231"><a href="/~robotics/cs44/index.php/Missionaries_and_Cannibals">Assignment #1</a></li>
				<li id="n-Assignment-.232"><a href="/~robotics/cs44/index.php/Internet_search_and_multi-robot_mazeworld">Assignment #2</a></li>
				<li id="n-Assignment-.233"><a href="/~robotics/cs44/index.php/Connect_four">Assignment #3</a></li>
				<li id="n-Assignment-.234"><a href="/~robotics/cs44/index.php/Circuit-board_layout">Assignment #4</a></li>
				<li id="n-Assignment-.235"><a href="/~robotics/cs44/index.php/Viterbi_algorithm">Assignment #5</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Lecture_outlines'>
		<h5>Lecture outlines</h5>
		<div class='pBody'>
			<ul>
				<li id="n-Lecture-2"><a href="/~robotics/cs44/index.php/Lecture_2">Lecture 2</a></li>
				<li id="n-Lecture-3"><a href="/~robotics/cs44/index.php/Lecture_3">Lecture 3</a></li>
				<li id="n-Lecture-4"><a href="/~robotics/cs44/index.php/Lecture_4">Lecture 4</a></li>
				<li id="n-Lecture-5"><a href="/~robotics/cs44/index.php/Lecture_5">Lecture 5</a></li>
				<li id="n-Lecture-6"><a href="/~robotics/cs44/index.php/Lecture_6">Lecture 6</a></li>
				<li id="n-Lecture-7"><a href="/~robotics/cs44/index.php/Lecture_7">Lecture 7</a></li>
				<li id="n-Lecture-8"><a href="/~robotics/cs44/index.php/Lecture_8">Lecture 8</a></li>
				<li id="n-Lecture-9"><a href="/~robotics/cs44/index.php/Lecture_9">Lecture 9</a></li>
				<li id="n-10:-CSP.27s"><a href="/~robotics/cs44/index.php/Lecture_10">10: CSP's</a></li>
				<li id="n-11:-Solving-CPS.27s"><a href="/~robotics/cs44/index.php/Lecture_11">11: Solving CPS's</a></li>
				<li id="n-12:-Prop-logic"><a href="/~robotics/cs44/index.php/Lecture_12">12: Prop logic</a></li>
				<li id="n-13:-Resolution"><a href="/~robotics/cs44/index.php/Lecture_13">13: Resolution</a></li>
				<li id="n-14:-SAT-problems"><a href="/~robotics/cs44/index.php/Lecture_14">14: SAT problems</a></li>
				<li id="n-22:-Viterbi.2C-HMMs"><a href="/~robotics/cs44/index.php/Lecture_22">22: Viterbi, HMMs</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/~robotics/cs44/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search cs44 [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/~robotics/cs44/index.php/Special:WhatLinksHere/Lecture_4" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/~robotics/cs44/index.php/Special:RecentChangesLinked/Lecture_4" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/~robotics/cs44/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/~robotics/cs44/index.php?title=Lecture_4&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>				<li id="t-permalink"><a href="/~robotics/cs44/index.php?title=Lecture_4&amp;oldid=302" title="Permanent link to this revision of the page">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/~robotics/cs44/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="lastmod"> This page was last modified on 2 February 2010, at 17:50.</li>
					<li id="viewcount">This page has been accessed 1,804 times.</li>
					<li id="privacy"><a href="/~robotics/cs44/index.php/cs44:Privacy_policy" title="cs44:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/~robotics/cs44/index.php/cs44:About" title="cs44:About">About cs44</a></li>
					<li id="disclaimer"><a href="/~robotics/cs44/index.php/cs44:General_disclaimer" title="cs44:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.214 secs. --></body></html>
